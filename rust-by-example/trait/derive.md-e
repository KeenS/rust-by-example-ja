## 15.1 Derive

The compiler is capable of providing basic implementations for some traits via
the `#[derive]` [attribute][attribute]. These traits can still be
manually implemented if a more complex behavior is required.

The following is a list of the "derivable" traits:
* Comparison traits:
  [`Eq`][eq],
  [`PartialEq`][partial-eq],
  [`Ord`][ord],
  [`PartialOrd`][partial-ord]
* [`Clone`][clone],
  to create `T` from `&T` via a copy.
* [`Hash`][hash], to
  compute a hash from `&T`.
* [`Default`][default],
  to create an empty instance of a data type.
* `Zero`, to
  create a zero instance of a numeric data type.
* [`Debug`][debug], to
  format a value using the `{:?}` formatter.

<div id="active-code">
<button class="btn btn-primary" type="button" id="run-code">Run</button>
<button class="btn btn-primary" type="button" id="reset-code">Reset</button>
<div id="editor">// &#96;Centimeters&#96;, a tuple struct that can be compared
#[derive(PartialEq, PartialOrd)]
struct Centimeters(f64);

// &#96;Inches&#96;, a tuple struct that can be printed
#[derive(Debug)]
struct Inches(i32);

impl Inches {
    fn to&#95;centimeters(&self) -&gt; Centimeters {
        let &Inches(inches) = self;

        Centimeters(inches as f64 &#42; 2.54)
    }
}

// &#96;Seconds&#96;, a tuple struct no additional attributes
struct Seconds(i32);

fn main() {
    let &#95;one&#95;second = Seconds(1);

    // Erro/rust-by-example[attribute]: &#96;Seconds&#96; can't be printed; it doesn't implement the &#96;Debug&#96; trait
    //println!("One second looks lik/rust-by-example[attribute]: {:?}", &#95;one&#95;second);
    // TODO ^ Try uncommenting this line

    // Erro/rust-by-example[attribute]: &#96;Seconds&#96; can't be compared; it doesn't implement the &#96;PartialEq&#96; trait
    //let &#95;this&#95;is&#95;true = (&#95;one&#95;second == &#95;one&#95;second);
    // TODO ^ Try uncommenting this line

    let foot = Inches(12);

    println!("One foot equals {:?}", foot);

    let meter = Centimeters(100.0);

    let cmp =
        if foot.to&#95;centimeters() &lt; meter {
            "smaller"
        } else {
            "bigger"
        };

    println!("One foot is {} than one meter.", cmp);
}</div>
<div id="result"></div>
</div>

[attribute]: /attribute.html
[eq]: http://doc.rust-lang.org/std/cmp/trait.Eq.html
[partial-eq]: http://doc.rust-lang.org/std/cmp/trait.PartialEq.html
[ord]: http://doc.rust-lang.org/std/cmp/trait.Ord.html
[partial-ord]: http://doc.rust-lang.org/std/cmp/trait.PartialOrd.html
[clone]: http://doc.rust-lang.org/std/clone/trait.Clone.html
[hash]: http://doc.rust-lang.org/std/hash/trait.Hash.html
[default]: http://doc.rust-lang.org/std/default/trait.Default.html
[debug]: http://doc.rust-lang.org/std/fmt/trait.Debug.html
