## 13.1 Functions

The same set of rules can be applied to function/rust-by-example[structs]: a type `T` becomes
generic when preceded by `<T>`. 

Using generic functions sometimes requires explicitly specifying type 
parameters. This may be if the function is called where the return type 
is generic, or if the compiler doesn't have enough information to infer 
the necessary type parameters.

A function call with explicitly specified type parameters looks like:
`fu/rust-by-example[fn]::<A, B, ...>()`.

<div id="active-code">
<button class="btn btn-primary" type="button" id="run-code">Run</button>
<button class="btn btn-primary" type="button" id="reset-code">Reset</button>
<div id="editor">struct A;          // Concrete type &#96;A&#96;.
struct S(A);       // Concrete type &#96;S&#96;.
struct SGen&lt;T&gt;(T); // Generic type &#96;SGen&#96;.

// These functions all take ownership of the variable passed into
// them and immediately go out of scope freeing the variable.

// Define a function &#96;reg&#95;fn&#96; that takes an argument &#96;s&#96; of type &#96;S&#96;.
// This has no &#96;&lt;T&gt;&#96; so this is not a generic function.
fn reg&#95;fn(&#95;/rust-by-example[structs]: S) {}

// Define a function &#96;gen&#95;spec&#95;t&#96; that takes an argument &#96;s&#96; of type &#96;SGen&lt;T&gt;&#96;
// that has been explicitly given the type parameter &#96;A&#96;. Because A has not 
// been specified as a generic type parameter for gen&#95;spec&#95;t, it is not generic.
fn gen&#95;spec&#95;t(&#95;/rust-by-example[structs]: SGen&lt;A&gt;) {}

// Define a function &#96;gen&#95;spec&#95;i32&#96; that takes an argument &#96;s&#96; of type &#96;SGen&lt;i32&gt;&#96;
// that has been explicitly given the type parameter &#96;i32&#96;.
// This function is also not generic.
fn gen&#95;spec&#95;i32(&#95;/rust-by-example[structs]: SGen&lt;i32&gt;) {}

// Define a function &#96;generic&#96; that takes an argument &#96;s&#96; of type &#96;SGen&lt;T&gt;&#96;.
// Because &#96;SGen&lt;T&gt;&#96; is preceded by &#96;&lt;T&gt;&#96;, this function is generic over &#96;T&#96;.
fn generic&lt;T&gt;(&#95;/rust-by-example[structs]: SGen&lt;T&gt;) {}

fn main() {
    // Using the non-generic functions
    reg&#95;fn(S(A));          // Concrete type.
    gen&#95;spec&#95;t(SGen(A));   // Implicitly specified type parameter &#96;A&#96;.
    gen&#95;spec&#95;i32(SGen(6)); // Implicitly specified type parameter &#96;i32&#96;.

    // Explicitly specified type parameter &#96;char&#96; to &#96;generic()&#96;.
    generi/rust-by-example[structs]::&lt;char&gt;(SGen('a'));

    // Implicitly specified type parameter &#96;char&#96; to &#96;generic()&#96;.
    generic(SGen('c'));
}</div>
<div id="result"></div>
</div>

### See also:

[functions][fn] and [`struct`s][structs]

[fn]: /rust-by-example/fn.html
[structs]: /custom_types/structs.html
