### 14.4.7 スタティックライフタイム

<!-- A `'static` lifetime is longest possible lifetime, and lasts for
the lifetime of the running program. A `'static` lifetime may also be
coerced to a shorter lifetimes. There are two ways to make a variable
with `'static` lifetime, and both are stored in the read-only memory
of the binary: -->
`'static`ライフタイムは全てのライフタイムの中で最長で、プログラムが動作している間、常に有効になります。`'static`であっても、より短いライフタイムに圧縮されることはあります。`'static`なライフタイムをもつ変数を作成する方法は2つあり、いずれも実行バイナリの一部としてROM上に保存されます。

<!-- * Make a constant with the `static` declaration.
* Make a `string` literal which has type: `&'static str`. -->
* `static`宣言とともに定数を作成する。
* 文字列リテラル で`&'static str`型を持つ変数を作成陶う

<!-- See the following example for a display of each method: -->
では、それぞれの方法の例を見ていきましょう。

<div id="active-code">
<button class="btn btn-primary" type="button" id="run-code">Run</button>
<button class="btn btn-primary" type="button" id="reset-code">Reset</button>
<div id="editor">// &#96;'static&#96;ライフタイムを持つ定数を作成
static NUM: i32 = 18;

// &#96;NUM&#96;への参照を返す。ライフタイムは&#96;'static&#96;から引数の
// ライフタイムへと圧縮されている。
fn coerce&#95;static&lt;'a&gt;(&#95;: &'a i32) -&gt; &'a i32 {
    &NUM
}

fn main() {
    {
        // 文字列リテラルを用いて変数を作成し、プリントする
        let static&#95;string = "I'm in read-only memory";
        println!("static&#95;string: {}", static&#95;string);

        // &#96;static&#95;string&#96;がスコープから抜けると、参照は使用することが
        // できなくなるが、データはバイナリ中に残る。
    }

    {
        // &#96;coerce&#95;static&#96;関数を呼び出すために、整数を作成
        let lifetime&#95;num = 9;

        // &#96;NUM&#96;を&#96;lifetime&#95;num&#96;のライフタイムへと圧縮
        let coerced&#95;static = coerce&#95;static(&lifetime&#95;num);

        println!("coerced&#95;stati/rust-by-example[static_const]: {}", coerced&#95;static);
    }

    println!("NUM: {} stays accessible!", NUM);
}</div>
<div id="result"></div>
</div>

### See als/rust-by-example[static_const]:

[`'static` 定数s][static_const]

[static_const]: /custom_types/constants.html
